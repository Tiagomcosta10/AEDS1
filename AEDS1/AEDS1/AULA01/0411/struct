struct matriz{
    int nlin,ncol;
    int*data;
}
struct matriz* criar matrix (int linhas, int colunas){
    struct matriz* nova=malloc(sizeaf(struct matriz));
    nova->nlin=linhas ; nova->ncol=colunas;
    nova->data->malloc(sizeaf(int)*linhas*colunas);
    return nova;

}
void free matriz (struct matriz* mat){
    if(mat!=NULL){
        free(mat->data); free(mat);
        mat=NULL;
    }

}
acessa colunar

int get matriz (struct matriz*mat, intl, int c){
    return mat->data[mat->ncol*l+c];
}
acessar nÃºmero exato
void set matriz(struct matriz*mat, int l, int c, int val){
mat->dat[amat->ncol*l+c] = val
}


somar duas matrizes
struct matriz*soma(struct matriz*A, struct matriz*B){
if(A->nlin!=  B->nlin || A->ncol!)
return NULL;
struct matriz*C= criarmatriz (A-.NLIN, A->);
for(int i=0; i<A->nlin*A->ncol;i++)
C->data[i]=A->data[i]+B->data[i];
return c;
}



struct matriz*transp(struct matriz*mat){

}


void imprimir matriz (struct matriz*mat){
    for(INT I=0;mat->nlin*mat->ncol;i++){
        printf("%d", mat->data[i]);
        if((i+1)%mat->ncol==0)
        printf("/n")

    }
}
void autotransp(structmatriz*mat){
    int t=mat->nlin;mat->nlin=mat->ncol;mat->ncol=t;
}